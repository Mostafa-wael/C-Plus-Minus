%{
// include the y.tab.h file. This file is automatically generated by the compiler from the grammar rules in the .y file.  
#include "y.tab.h"
// a C function that is called by the parser whenever it encounters a syntax error. 
void yyerror (char *s); 
// called by the parser whenever it needs a token. This is where the lexical analyzer is called. 
int yylex();
%}
/* a directive that tells the compiler that the code below is the lexical analyzer.  */
/* The lexical analyzer is built by specifying regular expressions for each token.  */
/* If you saw the string "print", return the token "print" */
/* first store the value of the token, and the second return its type */
/* Ignore white spaces */
/* Ignore comments starting with "//"" */
/* Ignore comments starting with "/*"" */
/* Else, return an error */
%%
"print"				        {return print;}
"exit"				        {return exit_command;}
[a-zA-Z_]	    {yylval.id = yytext[0]; return identifier;}
-?[0-9]+                    {yylval.num = atoi(yytext); return number;}
[ \t\n]                     ;
\/\/.*                      ;
\/\*.*\*\/                  ;
[-+=;]           	        {return yytext[0];}
.                           {ECHO; yyerror ("unexpected character");}
%%
// C code
// The wrapper function yywrap() 
int yywrap (void) {return 1;}