Lex(2) command: print
Lex(2) punctuators: (
Lex(2) string value: "declaration"
Lex(2) punctuators: )
"declaration"
Lex(2) end Of Statement: ; 

Lex(3) data modifier: const
Lex(3) data type: int
Lex(3) identifier: a
Lex(3) punctuators: =
Lex(3) int value: 5
Lex(3) end Of Statement: ; 

Lex(4) data type: int
Lex(4) identifier: b
Lex(4) punctuators: =
Lex(4) arithmtic operator: -
Lex(4) int value: 5
Lex(4) end Of Statement: ; 

Lex(5) command: print
Lex(5) punctuators: (
Lex(5) identifier: b
Lex(5) punctuators: )
-5
Lex(5) end Of Statement: ; 

Lex(6) command: print
Lex(6) punctuators: (
Lex(6) arithmtic operator: -
Lex(6) identifier: b
Lex(6) punctuators: )
5
Lex(6) end Of Statement: ; 

Lex(7) data type: float
Lex(7) identifier: b
Lex(7) punctuators: =
Lex(7) float value: 5.500000
Lex(7) end Of Statement: ; 

Lex(8) command: print
Lex(8) punctuators: (
Lex(8) identifier: b
Lex(8) punctuators: )
5
Lex(8) end Of Statement: ; 

Lex(9) data type: bool
Lex(9) identifier: c
Lex(9) punctuators: =
Lex(9) int value: 1
Lex(9) end Of Statement: ; 

Lex(10) data type: string
Lex(10) identifier: d
Lex(10) punctuators: =
Lex(10) string value: "hello"
Lex(10) end Of Statement: ; 

Lex(11) data type: void
Lex(11) identifier: e
Lex(11) punctuators: =
Lex(11) int value: 0
Lex(11) end Of Statement: ; 

Lex(12) command: print
Lex(12) punctuators: (
Lex(12) identifier: c
Lex(12) punctuators: )
1
Lex(12) end Of Statement: ; 

Lex(12) inline comment: // 1
Lex(13) command: print
Lex(13) punctuators: (
Lex(13) identifier: d
Lex(13) punctuators: )
0
Lex(13) end Of Statement: ; 

Lex(13) inline comment: // hello
Lex(14) punctuators: {
Lex(15) data modifier: const
Lex(15) data type: int
Lex(15) identifier: a
Lex(15) punctuators: =
Lex(15) int value: 10
Lex(15) end Of Statement: ; 

Lex(16) command: print
Lex(16) punctuators: (
Lex(16) identifier: a
Lex(16) punctuators: )
10
Lex(16) end Of Statement: ; 

Lex(17) punctuators: }
Lex(18) inline comment: ////////////////////////////////
Lex(19) command: print
Lex(19) punctuators: (
Lex(19) string value: "logic"
Lex(19) punctuators: )
"logic"
Lex(19) end Of Statement: ; 

Lex(20) data type: bool
Lex(20) identifier: a
Lex(20) punctuators: =
Lex(20) int value: 1
Lex(20) end Of Statement: ; 

Lex(21) data type: bool
Lex(21) identifier: b
Lex(21) punctuators: =
Lex(21) int value: 0
Lex(21) end Of Statement: ; 

Lex(22) command: print
Lex(22) punctuators: (
Lex(22) identifier: a
Lex(22) punctuators: )
1
Lex(22) end Of Statement: ; 

Lex(22) inline comment: // 1
Lex(23) command: print
Lex(23) punctuators: (
Lex(23) identifier: b
Lex(23) punctuators: )
0
Lex(23) end Of Statement: ; 

Lex(23) inline comment: // 0
Lex(24) command: print
Lex(24) punctuators: (
Lex(24) identifier: a
Lex(24) comparetor operator: ==
Lex(24) identifier: b
Lex(24) punctuators: )
0
Lex(24) end Of Statement: ; 

Lex(24) inline comment: // 0
Lex(25) command: print
Lex(25) punctuators: (
Lex(25) identifier: a
Lex(25) comparetor operator: !=
Lex(25) identifier: b
Lex(25) punctuators: )
1
Lex(25) end Of Statement: ; 

Lex(25) inline comment: // 1
Lex(26) command: print
Lex(26) punctuators: (
Lex(26) identifier: a
Lex(26) comparetor operator: <
Lex(26) identifier: b
Lex(26) punctuators: )
0
Lex(26) end Of Statement: ; 

Lex(26) inline comment: // 0
Lex(27) command: print
Lex(27) punctuators: (
Lex(27) identifier: a
Lex(27) comparetor operator: >
Lex(27) identifier: b
Lex(27) punctuators: )
1
Lex(27) end Of Statement: ; 

Lex(27) inline comment: // 1
Lex(28) command: print
Lex(28) punctuators: (
Lex(28) identifier: a
Lex(28) comparetor operator: <=
Lex(28) identifier: b
Lex(28) punctuators: )
0
Lex(28) end Of Statement: ; 

Lex(28) inline comment: // 0
Lex(29) command: print
Lex(29) punctuators: (
Lex(29) identifier: a
Lex(29) comparetor operator: >=
Lex(29) identifier: b
Lex(29) punctuators: )
1
Lex(29) end Of Statement: ; 

Lex(29) inline comment: // 1
Lex(30) inline comment: ////////////////////////////////
Lex(31) command: print
Lex(31) punctuators: (
Lex(31) string value: "More logic"
Lex(31) punctuators: )
"More logic"
Lex(31) end Of Statement: ; 

Lex(32) command: print
Lex(32) punctuators: (
Lex(32) logical operator: !
Lex(32) identifier: a
Lex(32) punctuators: )
0
Lex(32) end Of Statement: ; 

Lex(32) inline comment: // 0
Lex(33) command: print
Lex(33) punctuators: (
Lex(33) identifier: a
Lex(33) logical operator: &&
Lex(33) identifier: b
Lex(33) punctuators: )
0
Lex(33) end Of Statement: ; 

Lex(33) inline comment: // 0
Lex(34) command: print
Lex(34) punctuators: (
Lex(34) identifier: a
Lex(34) logical operator: ||
Lex(34) identifier: b
Lex(34) punctuators: )
1
Lex(34) end Of Statement: ; 

Lex(34) inline comment: // 1
Lex(35) command: print
Lex(35) punctuators: (
Lex(35) punctuators: (
Lex(35) identifier: a
Lex(35) logical operator: &&
Lex(35) identifier: a
Lex(35) logical operator: &&
Lex(35) identifier: b
Lex(35) punctuators: )
Lex(35) logical operator: ||
Lex(35) identifier: a
Lex(35) punctuators: )
1
Lex(35) end Of Statement: ; 

Lex(35) inline comment: // 1
Lex(36) inline comment: ////////////////////////////////
Lex(37) command: print
Lex(37) punctuators: (
Lex(37) string value: "assignment"
Lex(37) punctuators: )
"assignment"
Lex(37) end Of Statement: ; 

Lex(38) data type: int
Lex(38) identifier: a
Lex(38) punctuators: =
Lex(38) int value: 10
Lex(38) end Of Statement: ; 

Lex(38) inline comment: // 1010
Lex(39) data type: int
Lex(39) identifier: b
Lex(39) punctuators: =
Lex(39) int value: 10
Lex(39) end Of Statement: ; 

Lex(39) inline comment: // 1010
Lex(40) data type: int
Lex(40) identifier: c
Lex(40) punctuators: =
Lex(40) int value: 2
Lex(40) end Of Statement: ; 

Lex(40) inline comment: // 0010
Lex(41) data type: int
Lex(41) identifier: d
Lex(41) punctuators: =
Lex(41) identifier: a
Lex(41) arithmtic operator: *
Lex(41) identifier: b
Lex(41) arithmtic operator: +
Lex(41) identifier: c
Lex(41) end Of Statement: ; 

Lex(42) command: print
Lex(42) punctuators: (
Lex(42) identifier: a
Lex(42) comparetor operator: ==
Lex(42) int value: 10
Lex(42) punctuators: )
1
Lex(42) end Of Statement: ; 

Lex(43) command: print
Lex(43) punctuators: (
Lex(43) identifier: b
Lex(43) comparetor operator: ==
Lex(43) int value: 10
Lex(43) punctuators: )
1
Lex(43) end Of Statement: ; 

Lex(44) command: print
Lex(44) punctuators: (
Lex(44) identifier: c
Lex(44) comparetor operator: ==
Lex(44) int value: 2
Lex(44) punctuators: )
1
Lex(44) end Of Statement: ; 

Lex(45) command: print
Lex(45) punctuators: (
Lex(45) identifier: d
Lex(45) comparetor operator: ==
Lex(45) int value: 102
Lex(45) punctuators: )
1
Lex(45) end Of Statement: ; 

Lex(45) inline comment: // 102
Lex(46) inline comment: ////////////////////////////////
Lex(47) command: print
Lex(47) punctuators: (
Lex(47) string value: "arithmetic"
Lex(47) punctuators: )
"arithmetic"
Lex(47) end Of Statement: ; 

Lex(48) command: print
Lex(48) punctuators: (
Lex(48) arithmtic operator: -
Lex(48) identifier: a
Lex(48) comparetor operator: ==
Lex(48) arithmtic operator: -
Lex(48) int value: 10
Lex(48) punctuators: )
1
Lex(48) end Of Statement: ; 

Lex(48) inline comment: // -10
Lex(49) inline comment: // print(-3-4);
Lex(50) command: print
Lex(50) punctuators: (
Lex(50) identifier: a
Lex(50) arithmtic operator: +
Lex(50) identifier: b
Lex(50) comparetor operator: ==
Lex(50) int value: 20
Lex(50) punctuators: )
1
Lex(50) end Of Statement: ; 

Lex(50) inline comment: // 20
Lex(51) command: print
Lex(51) punctuators: (
Lex(51) identifier: a
Lex(51) arithmtic operator: -
Lex(51) identifier: b
Lex(51) comparetor operator: ==
Lex(51) int value: 0
Lex(51) punctuators: )
1
Lex(51) end Of Statement: ; 

Lex(51) inline comment: // 0
Lex(52) command: print
Lex(52) punctuators: (
Lex(52) identifier: a
Lex(52) arithmtic operator: /
Lex(52) identifier: b
Lex(52) comparetor operator: ==
Lex(52) int value: 1
Lex(52) punctuators: )
1
Lex(52) end Of Statement: ; 

Lex(52) inline comment: // 1
Lex(53) command: print
Lex(53) punctuators: (
Lex(53) identifier: a
Lex(53) arithmtic operator: %
Lex(53) identifier: c
Lex(53) comparetor operator: ==
Lex(53) int value: 0
Lex(53) punctuators: )
1
Lex(53) end Of Statement: ; 

Lex(53) inline comment: // 0
Lex(54) command: print
Lex(54) punctuators: (
Lex(54) identifier: a
Lex(54) arithmtic operator: *
Lex(54) identifier: b
Lex(54) arithmtic operator: -
Lex(54) identifier: b
Lex(54) arithmtic operator: +
Lex(54) identifier: a
Lex(54) arithmtic operator: /
Lex(54) identifier: b
Lex(54) comparetor operator: ==
Lex(54) int value: 91
Lex(54) punctuators: )
1
Lex(54) end Of Statement: ; 

Lex(54) inline comment: // 91
Lex(55) command: print
Lex(55) punctuators: (
Lex(55) int value: 100
Lex(55) arithmtic operator: -
Lex(55) int value: 5
Lex(55) punctuators: )
95
Lex(55) end Of Statement: ; 

Lex(56) command: print
Lex(56) punctuators: (
Lex(56) arithmtic operator: -
Lex(56) int value: 100
Lex(56) arithmtic operator: -
Lex(56) int value: 5
Lex(56) arithmtic operator: +
Lex(56) int value: 5
Lex(56) punctuators: )
-100
Lex(56) end Of Statement: ; 

Lex(57) inline comment: ////////////////////////////////
Lex(58) command: print
Lex(58) punctuators: (
Lex(58) string value: "bitwise"
Lex(58) punctuators: )
"bitwise"
Lex(58) end Of Statement: ; 

Lex(59) command: print
Lex(59) punctuators: (
Lex(59) punctuators: (
Lex(59) identifier: a
Lex(59) bitwise operator: |
Lex(59) identifier: c
Lex(59) punctuators: )
Lex(59) comparetor operator: ==
Lex(59) int value: 10
Lex(59) punctuators: )
1
Lex(59) end Of Statement: ; 

Lex(59) inline comment: // 1010 | 0010 = 1010 = 10
Lex(60) command: print
Lex(60) punctuators: (
Lex(60) punctuators: (
Lex(60) identifier: a
Lex(60) bitwise operator: &
Lex(60) identifier: c
Lex(60) punctuators: )
Lex(60) comparetor operator: ==
Lex(60) int value: 2
Lex(60) punctuators: )
1
Lex(60) end Of Statement: ; 

Lex(60) inline comment: // 1010 & 0010 = 0010 = 2
Lex(61) command: print
Lex(61) punctuators: (
Lex(61) punctuators: (
Lex(61) identifier: a
Lex(61) bitwise operator: ^
Lex(61) identifier: c
Lex(61) punctuators: )
Lex(61) comparetor operator: ==
Lex(61) int value: 8
Lex(61) punctuators: )
1
Lex(61) end Of Statement: ; 

Lex(61) inline comment: // 1010 ^ 0010 = 1000 = 8
Lex(62) command: print
Lex(62) punctuators: (
Lex(62) punctuators: (
Lex(62) identifier: a
Lex(62) bitwise operator: <<
Lex(62) identifier: c
Lex(62) punctuators: )
Lex(62) comparetor operator: ==
Lex(62) int value: 40
Lex(62) punctuators: )
1
Lex(62) end Of Statement: ; 

Lex(62) inline comment: // 1010 << 0010 = 101000 = 40
Lex(63) command: print
Lex(63) punctuators: (
Lex(63) punctuators: (
Lex(63) identifier: a
Lex(63) bitwise operator: >>
Lex(63) identifier: c
Lex(63) punctuators: )
Lex(63) comparetor operator: ==
Lex(63) int value: 2
Lex(63) punctuators: )
1
Lex(63) end Of Statement: ; 

Lex(63) inline comment: // 1010 >> 0010 = 10 = 2
Lex(64) command: print
Lex(64) punctuators: (
Lex(64) punctuators: (
Lex(64) bitwise operator: ~
Lex(64) identifier: a
Lex(64) punctuators: )
Lex(64) comparetor operator: ==
Lex(64) arithmtic operator: -
Lex(64) int value: 11
Lex(64) punctuators: )
1
Lex(64) end Of Statement: ; 

Lex(64) inline comment: // -11
Lex(65) command: print
Lex(65) punctuators: (
Lex(65) punctuators: (
Lex(65) identifier: a
Lex(65) bitwise operator: <<
Lex(65) identifier: c
Lex(65) punctuators: )
Lex(65) bitwise operator: >>
Lex(65) identifier: c
Lex(65) comparetor operator: ==
Lex(65) int value: 10
Lex(65) punctuators: )
1
Lex(65) end Of Statement: ; 

Lex(65) inline comment: // 10
Lex(66) inline comment: ////////////////////////////////
Lex(67) control flow: if
Lex(67) punctuators: (
Lex(67) identifier: a
Lex(67) comparetor operator: ==
Lex(67) int value: 10
Lex(67) punctuators: )
Lex(67) punctuators: {
Lex(68) command: print
Lex(68) punctuators: (
Lex(68) string value: "if"
Lex(68) punctuators: )
"if"
Lex(68) end Of Statement: ; 

Lex(69) command: print
Lex(69) punctuators: (
Lex(69) string value: "another if"
Lex(69) punctuators: )
"another if"
Lex(69) end Of Statement: ; 

Lex(70) punctuators: }
Lex(71) control flow: else
Lex(71) control flow: if
Lex(71) punctuators: (
Lex(71) identifier: a
Lex(71) comparetor operator: ==
Lex(71) int value: 11
Lex(71) punctuators: )
Lex(71) punctuators: {
Lex(72) command: print
Lex(72) punctuators: (
Lex(72) string value: "elif"
Lex(72) punctuators: )
"elif"
Lex(72) end Of Statement: ; 

Lex(73) command: print
Lex(73) punctuators: (
Lex(73) string value: "another elif"
Lex(73) punctuators: )
"another elif"
Lex(73) end Of Statement: ; 

Lex(74) punctuators: }
Lex(75) control flow: else
Lex(75) punctuators: {
Lex(76) command: print
Lex(76) punctuators: (
Lex(76) string value: "else"
Lex(76) punctuators: )
"else"
Lex(76) end Of Statement: ; 

Lex(77) command: print
Lex(77) punctuators: (
Lex(77) string value: "another else"
Lex(77) punctuators: )
"another else"
Lex(77) end Of Statement: ; 

Lex(78) control flow: if
Lex(78) punctuators: (
Lex(78) identifier: a
Lex(78) comparetor operator: ==
Lex(78) int value: 10
Lex(78) punctuators: )
Lex(78) punctuators: {
Lex(79) command: print
Lex(79) punctuators: (
Lex(79) string value: "if"
Lex(79) punctuators: )
"if"
Lex(79) end Of Statement: ; 

Lex(80) command: print
Lex(80) punctuators: (
Lex(80) string value: "another if"
Lex(80) punctuators: )
"another if"
Lex(80) end Of Statement: ; 

Lex(81) punctuators: }
Lex(82) control flow: else
Lex(82) punctuators: {
Lex(83) command: print
Lex(83) punctuators: (
Lex(83) string value: "else"
Lex(83) punctuators: )
"else"
Lex(83) end Of Statement: ; 

Lex(84) command: print
Lex(84) punctuators: (
Lex(84) string value: "another else"
Lex(84) punctuators: )
"another else"
Lex(84) end Of Statement: ; 

Lex(85) punctuators: }
Lex(86) punctuators: }
Lex(87) control flow: if
Lex(87) punctuators: (
Lex(87) identifier: a
Lex(87) comparetor operator: ==
Lex(87) int value: 10
Lex(87) punctuators: )
Lex(87) punctuators: {
Lex(88) command: print
Lex(88) punctuators: (
Lex(88) string value: "if"
Lex(88) punctuators: )
"if"
Lex(88) end Of Statement: ; 

Lex(89) command: print
Lex(89) punctuators: (
Lex(89) string value: "another if"
Lex(89) punctuators: )
"another if"
Lex(89) end Of Statement: ; 

Lex(90) punctuators: }
Lex(91) control flow: else
Lex(91) control flow: if
Lex(91) punctuators: (
Lex(91) identifier: a
Lex(91) comparetor operator: ==
Lex(91) int value: 11
Lex(91) punctuators: )
Lex(91) punctuators: {
Lex(92) command: print
Lex(92) punctuators: (
Lex(92) string value: "else"
Lex(92) punctuators: )
"else"
Lex(92) end Of Statement: ; 

Lex(93) command: print
Lex(93) punctuators: (
Lex(93) string value: "another else"
Lex(93) punctuators: )
"another else"
Lex(93) end Of Statement: ; 

Lex(94) punctuators: }
Lex(95) inline comment: ////////////////////////////////
Lex(96) command: print
Lex(96) punctuators: (
Lex(96) string value: "while loops"
Lex(96) punctuators: )
"while loops"
Lex(96) end Of Statement: ; 

Lex(97) data type: int
Lex(97) identifier: a
Lex(97) punctuators: =
Lex(97) int value: 0
Lex(97) end Of Statement: ; 

Lex(98) control flow: while
Lex(98) punctuators: (
Lex(98) identifier: a
Lex(98) comparetor operator: <
Lex(98) int value: 20
Lex(98) punctuators: )
Lex(98) punctuators: {
Lex(99) command: print
Lex(99) punctuators: (
Lex(99) identifier: a
Lex(99) punctuators: )
0
Lex(99) end Of Statement: ; 

Lex(100) identifier: a
Lex(100) punctuators: =
Lex(100) identifier: a
Lex(100) arithmtic operator: +
Lex(100) int value: 1
Lex(100) end Of Statement: ; 

Lex(101) punctuators: }
Lex(102) command: print
Lex(102) punctuators: (
Lex(102) identifier: a
Lex(102) punctuators: )
1
Lex(102) end Of Statement: ; 

Lex(103) control flow: while
Lex(103) punctuators: (
Lex(103) identifier: a
Lex(103) comparetor operator: <
Lex(103) int value: 20
Lex(103) punctuators: )
Lex(103) punctuators: {
Lex(104) control flow: if
Lex(104) punctuators: (
Lex(104) identifier: a
Lex(104) comparetor operator: ==
Lex(104) int value: 10
Lex(104) punctuators: )
Lex(104) punctuators: {
Lex(105) command: print
Lex(105) punctuators: (
Lex(105) identifier: a
Lex(105) punctuators: )
1
Lex(105) end Of Statement: ; 

Lex(106) punctuators: }
Lex(107) identifier: a
Lex(107) punctuators: =
Lex(107) identifier: a
Lex(107) arithmtic operator: +
Lex(107) int value: 1
Lex(107) end Of Statement: ; 

Lex(108) punctuators: }
Lex(109) command: print
Lex(109) punctuators: (
Lex(109) identifier: a
Lex(109) punctuators: )
2
Lex(109) end Of Statement: ; 

Lex(110) inline comment: ////////////////////////////////
Lex(111) command: print
Lex(111) punctuators: (
Lex(111) string value: "for loops"
Lex(111) punctuators: )
"for loops"
Lex(111) end Of Statement: ; 

Lex(112) control flow: for
Lex(112) punctuators: (
Lex(112) identifier: a
Lex(112) punctuators: =
Lex(112) int value: 2
Lex(112) end Of Statement: ; 

Lex(112) identifier: a
Lex(112) comparetor operator: <
Lex(112) int value: 10
Lex(112) end Of Statement: ; 

Lex(112) identifier: a
Lex(112) punctuators: =
Lex(112) identifier: a
Lex(112) arithmtic operator: +
Lex(112) int value: 1
Lex(112) punctuators: )
Lex(112) punctuators: {
Lex(113) command: print
Lex(113) punctuators: (
Lex(113) identifier: a
Lex(113) punctuators: )
3
Lex(113) end Of Statement: ; 

Lex(114) punctuators: }
Lex(115) control flow: for
Lex(115) punctuators: (
Lex(115) identifier: a
Lex(115) punctuators: =
Lex(115) int value: 2
Lex(115) end Of Statement: ; 

Lex(115) identifier: a
Lex(115) comparetor operator: <
Lex(115) int value: 10
Lex(115) end Of Statement: ; 

Lex(115) identifier: a
Lex(115) punctuators: =
Lex(115) identifier: a
Lex(115) arithmtic operator: +
Lex(115) int value: 1
Lex(115) punctuators: )
Lex(115) punctuators: {
Lex(116) command: print
Lex(116) punctuators: (
Lex(116) identifier: a
Lex(116) punctuators: )
3
Lex(116) end Of Statement: ; 

Lex(117) identifier: b
Lex(117) punctuators: =
Lex(117) identifier: a
Lex(117) end Of Statement: ; 

Lex(118) control flow: while
Lex(118) punctuators: (
Lex(118) identifier: b
Lex(118) comparetor operator: <
Lex(118) int value: 10
Lex(118) punctuators: )
Lex(118) punctuators: {
Lex(119) control flow: if
Lex(119) punctuators: (
Lex(119) identifier: b
Lex(119) comparetor operator: ==
Lex(119) int value: 5
Lex(119) punctuators: )
Lex(119) punctuators: {
Lex(120) command: print
Lex(120) punctuators: (
Lex(120) string value: "hi"
Lex(120) punctuators: )
"hi"
Lex(120) end Of Statement: ; 

Lex(121) command: print
Lex(121) punctuators: (
Lex(121) identifier: b
Lex(121) punctuators: )
3
Lex(121) end Of Statement: ; 

Lex(122) punctuators: }
Lex(124) identifier: b
Lex(124) punctuators: =
Lex(124) identifier: b
Lex(124) arithmtic operator: +
Lex(124) int value: 1
Lex(124) end Of Statement: ; 

Lex(125) punctuators: }
Lex(126) punctuators: }
Lex(127) inline comment: ////////////////////////////////
Lex(128) command: print
Lex(128) punctuators: (
Lex(128) string value: "repeat loops"
Lex(128) punctuators: )
"repeat loops"
Lex(128) end Of Statement: ; 

Lex(129) identifier: a
Lex(129) punctuators: =
Lex(129) int value: 0
Lex(129) end Of Statement: ; 

Lex(130) control flow: repeat
Lex(130) punctuators: {
Lex(131) command: print
Lex(131) punctuators: (
Lex(131) identifier: a
Lex(131) punctuators: )
0
Lex(131) end Of Statement: ; 

Lex(132) identifier: a
Lex(132) punctuators: =
Lex(132) identifier: a
Lex(132) arithmtic operator: +
Lex(132) int value: 1
Lex(132) end Of Statement: ; 

Lex(133) command: print
Lex(133) punctuators: (
Lex(133) identifier: a
Lex(133) punctuators: )
1
Lex(133) end Of Statement: ; 

Lex(134) punctuators: }
Lex(134) control flow: until
Lex(134) punctuators: (
Lex(134) identifier: a
Lex(134) comparetor operator: ==
Lex(134) int value: 1
Lex(134) punctuators: )
Lex(134) end Of Statement: ; 

Lex(135) control flow: repeat
Lex(135) punctuators: {
Lex(136) command: print
Lex(136) punctuators: (
Lex(136) identifier: a
Lex(136) punctuators: )
1
Lex(136) end Of Statement: ; 

Lex(137) identifier: a
Lex(137) punctuators: =
Lex(137) identifier: a
Lex(137) arithmtic operator: +
Lex(137) int value: 1
Lex(137) end Of Statement: ; 

Lex(138) control flow: if
Lex(138) punctuators: (
Lex(138) identifier: a
Lex(138) comparetor operator: ==
Lex(138) int value: 1
Lex(138) punctuators: )
Lex(138) punctuators: {
Lex(139) command: print
Lex(139) punctuators: (
Lex(139) identifier: a
Lex(139) punctuators: )
2
Lex(139) end Of Statement: ; 

Lex(140) punctuators: }
Lex(141) punctuators: }
Lex(141) control flow: until
Lex(141) punctuators: (
Lex(141) identifier: a
Lex(141) comparetor operator: ==
Lex(141) int value: 1
Lex(141) punctuators: )
Lex(141) end Of Statement: ; 

Lex(142) inline comment: ////////////////////////////////
Lex(143) command: print
Lex(143) punctuators: (
Lex(143) string value: "switch case loops"
Lex(143) punctuators: )
"switch case loops"
Lex(143) end Of Statement: ; 

Lex(144) control flow: switch
Lex(144) punctuators: (
Lex(144) identifier: a
Lex(144) punctuators: )
Lex(144) punctuators: {
Lex(145) control flow: default
Lex(145) punctuators: :
Lex(146) command: print
Lex(146) punctuators: (
Lex(146) string value: "default"
Lex(146) punctuators: )
"default"
Lex(146) end Of Statement: ; 

Lex(147) control flow: break
Lex(147) end Of Statement: ; 

Lex(148) punctuators: }
Lex(149) control flow: switch
Lex(149) punctuators: (
Lex(149) identifier: a
Lex(149) punctuators: )
Lex(149) punctuators: {
Lex(150) control flow: case
Lex(150) int value: 1
Lex(150) punctuators: :
Lex(151) command: print
Lex(151) punctuators: (
Lex(151) string value: "1"
Lex(151) punctuators: )
"1"
Lex(151) end Of Statement: ; 

Lex(152) control flow: break
Lex(152) end Of Statement: ; 

Lex(154) control flow: case
Lex(154) int value: 2
Lex(154) punctuators: :
Lex(155) command: print
Lex(155) punctuators: (
Lex(155) string value: "2"
Lex(155) punctuators: )
"2"
Lex(155) end Of Statement: ; 

Lex(156) control flow: break
Lex(156) end Of Statement: ; 

Lex(158) control flow: case
Lex(158) int value: 3
Lex(158) punctuators: :
Lex(159) command: print
Lex(159) punctuators: (
Lex(159) string value: "3"
Lex(159) punctuators: )
"3"
Lex(159) end Of Statement: ; 

Lex(160) control flow: break
Lex(160) end Of Statement: ; 

Lex(161) punctuators: }
Lex(163) control flow: switch
Lex(163) punctuators: (
Lex(163) identifier: a
Lex(163) punctuators: )
Lex(163) punctuators: {
Lex(164) control flow: case
Lex(164) int value: 1
Lex(164) punctuators: :
Lex(165) command: print
Lex(165) punctuators: (
Lex(165) string value: "1"
Lex(165) punctuators: )
"1"
Lex(165) end Of Statement: ; 

Lex(166) control flow: break
Lex(166) end Of Statement: ; 

Lex(168) control flow: case
Lex(168) int value: 2
Lex(168) punctuators: :
Lex(169) command: print
Lex(169) punctuators: (
Lex(169) string value: "2"
Lex(169) punctuators: )
"2"
Lex(169) end Of Statement: ; 

Lex(170) control flow: break
Lex(170) end Of Statement: ; 

Lex(172) control flow: case
Lex(172) int value: 3
Lex(172) punctuators: :
Lex(173) command: print
Lex(173) punctuators: (
Lex(173) string value: "3"
Lex(173) punctuators: )
"3"
Lex(173) end Of Statement: ; 

Lex(174) control flow: break
Lex(174) end Of Statement: ; 

Lex(176) control flow: default
Lex(176) punctuators: :
Lex(177) command: print
Lex(177) punctuators: (
Lex(177) string value: "default"
Lex(177) punctuators: )
"default"
Lex(177) end Of Statement: ; 

Lex(178) control flow: break
Lex(178) end Of Statement: ; 

Lex(179) punctuators: }
Lex(180) inline comment: ////////////////////////////////
Lex(181) command: print
Lex(181) punctuators: (
Lex(181) string value: "functions"
Lex(181) punctuators: )
"functions"
Lex(181) end Of Statement: ; 

Lex(182) identifier: a
Lex(182) arithmtic operator: +
Lex(182) int value: 1
Lex(182) end Of Statement: ; 

Lex(183) identifier: x
Lex(183) punctuators: (
Lex(183) int value: 1
Lex(183) punctuators: ,
Lex(183) int value: 2
Lex(183) punctuators: )
Lex(183) end Of Statement: ; 

Lex(184) command: print
Lex(184) punctuators: (
Lex(184) string value: "x"
Lex(184) punctuators: )
"x"
Lex(184) end Of Statement: ; 

Lex(185) data type: int
Lex(185) identifier: y
Lex(185) punctuators: (
Lex(185) punctuators: )
Lex(185) punctuators: {
Lex(186) command: print
Lex(186) punctuators: (
Lex(186) string value: "y"
Lex(186) punctuators: )
"y"
Lex(186) end Of Statement: ; 

Lex(187) control flow: return
Lex(187) int value: 1
Lex(187) end Of Statement: ; 

Lex(188) punctuators: }
functionDef
Lex(189) data type: int
Lex(189) identifier: x
Lex(189) punctuators: (
Lex(189) data type: int
Lex(189) identifier: a
Lex(189) punctuators: ,
Lex(189) data type: int
Lex(189) identifier: b
Lex(189) punctuators: )
Lex(189) punctuators: {
Lex(190) command: print
Lex(190) punctuators: (
Lex(190) string value: "add"
Lex(190) punctuators: )
"add"
Lex(190) end Of Statement: ; 

Lex(191) control flow: return
Lex(191) identifier: a
Lex(191) arithmtic operator: +
Lex(191) identifier: b
Lex(191) end Of Statement: ; 

Lex(192) punctuators: }
Lex(193) identifier: a
Lex(193) punctuators: =
Lex(193) identifier: y
Lex(193) punctuators: (
Lex(193) punctuators: )
Lex(193) end Of Statement: ; 

Lex(194) command: print
Lex(194) punctuators: (
Lex(194) string value: "y done"
Lex(194) punctuators: )
"y done"
Lex(194) end Of Statement: ; 

Lex(195) inline comment: ////////////////////////////////
Lex(196) command: print
Lex(196) punctuators: (
Lex(196) string value: "enums"
Lex(196) punctuators: )
"enums"
Lex(196) end Of Statement: ; 

Lex(197) enum: enum
Lex(197) identifier: Color
Lex(197) punctuators: {
Lex(198) identifier: RED
Lex(198) punctuators: =
Lex(198) int value: 10
Lex(198) punctuators: ,
Lex(199) identifier: GREEN
Lex(199) punctuators: ,
Lex(200) identifier: BLUE
Lex(200) punctuators: =
Lex(200) int value: 12
Lex(200) punctuators: ,
Lex(201) identifier: RED
Lex(202) punctuators: }
Lex(202) end Of Statement: ; 

Lex(203) command: print
Lex(203) punctuators: (
Lex(203) int value: 0
Lex(203) punctuators: )
0
Lex(203) end Of Statement: ; 

Lex(204) punctuators: {
Lex(205) identifier: Color
Lex(205) identifier: c1
Lex(205) end Of Statement: ; 

Lex(206) identifier: Color
Lex(206) identifier: c2
Lex(206) punctuators: =
Lex(206) identifier: RED
Lex(206) end Of Statement: ; 

Lex(207) identifier: Color
Lex(207) identifier: c3
Lex(207) punctuators: =
Lex(207) int value: 3
Lex(207) arithmtic operator: +
Lex(207) int value: 5
Lex(207) end Of Statement: ; 

Lex(208) punctuators: }
Lex(209) data type: string
Lex(209) identifier: a
Lex(209) punctuators: =
Lex(209) string value: "hi"
Lex(209) end Of Statement: ; 

Lex(210) data type: int
Lex(210) identifier: b
Lex(210) punctuators: =
Lex(210) int value: 5
Lex(210) end Of Statement: ; 

Lex(211) command: print
Lex(211) punctuators: (
Lex(211) value: true
Lex(211) punctuators: )
1
Lex(211) end Of Statement: ; 

Lex(212) command: print
Lex(212) punctuators: (
Lex(212) identifier: b
Lex(212) punctuators: )
5
Lex(212) end Of Statement: ; 

Lex(213) command: exit
