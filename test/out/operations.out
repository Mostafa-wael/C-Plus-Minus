Lex(1) command: print
Lex(1) punctuators: (
Lex(1) string value: "arithmetic"
Lex(1) punctuators: )
"arithmetic"
Lex(1) end Of Statement: ; 

Lex(2) data type: int
Lex(2) identifier: a
Lex(2) punctuators: =
Lex(2) int value: 10
Quads() push 10
Lex(2) end Of Statement: ; 

Lex(3) data type: int
Lex(3) identifier: b
Lex(3) punctuators: =
Lex(3) int value: 10
Quads() push 10
Lex(3) end Of Statement: ; 

Lex(4) data type: int
Lex(4) identifier: c
Lex(4) punctuators: =
Lex(4) int value: 2
Quads() push 2
Lex(4) end Of Statement: ; 

Lex(5) command: print
Lex(5) punctuators: (
Lex(5) arithmtic operator: -
Lex(5) identifier: a
Quads() push a
Quads() NEG
Lex(5) comparetor operator: ==
Lex(5) arithmtic operator: -
Lex(5) int value: 10
Quads() push 10
Quads() NEG
Lex(5) punctuators: )
Quads() EQ
1
Lex(5) end Of Statement: ; 

Lex(5) inline comment: // -10
Lex(6) command: print
Lex(6) punctuators: (
Lex(6) arithmtic operator: -
Lex(6) int value: 3
Quads() push 3
Quads() NEG
Lex(6) arithmtic operator: -
Lex(6) int value: 4
Quads() push 4
Lex(6) punctuators: )
Quads() SUB
-7
Lex(6) end Of Statement: ; 

Lex(7) command: print
Lex(7) punctuators: (
Lex(7) identifier: a
Lex(7) arithmtic operator: +
Quads() push a
Lex(7) identifier: b
Lex(7) comparetor operator: ==
Quads() push b
Quads() ADD
Lex(7) int value: 20
Quads() push 20
Lex(7) punctuators: )
Quads() EQ
1
Lex(7) end Of Statement: ; 

Lex(7) inline comment: // 20
Lex(8) command: print
Lex(8) punctuators: (
Lex(8) identifier: a
Lex(8) arithmtic operator: -
Quads() push a
Lex(8) identifier: b
Lex(8) comparetor operator: ==
Quads() push b
Quads() SUB
Lex(8) int value: 0
Quads() push 0
Lex(8) punctuators: )
Quads() EQ
1
Lex(8) end Of Statement: ; 

Lex(8) inline comment: // 0
Lex(9) command: print
Lex(9) punctuators: (
Lex(9) identifier: a
Lex(9) arithmtic operator: /
Quads() push a
Lex(9) identifier: b
Lex(9) comparetor operator: ==
Quads() push b
Quads() DIV
Lex(9) int value: 1
Quads() push 1
Lex(9) punctuators: )
Quads() EQ
1
Lex(9) end Of Statement: ; 

Lex(9) inline comment: // 1
Lex(10) command: print
Lex(10) punctuators: (
Lex(10) identifier: a
Lex(10) arithmtic operator: %
Quads() push a
Lex(10) identifier: c
Lex(10) comparetor operator: ==
Quads() push c
Quads() MOD
Lex(10) int value: 0
Quads() push 0
Lex(10) punctuators: )
Quads() EQ
1
Lex(10) end Of Statement: ; 

Lex(10) inline comment: // 0
Lex(11) command: print
Lex(11) punctuators: (
Lex(11) identifier: a
Lex(11) arithmtic operator: *
Quads() push a
Lex(11) identifier: b
Lex(11) arithmtic operator: -
Quads() push b
Quads() MUL
Lex(11) identifier: b
Lex(11) arithmtic operator: +
Quads() push b
Quads() SUB
Lex(11) identifier: a
Lex(11) arithmtic operator: /
Quads() push a
Lex(11) identifier: b
Lex(11) comparetor operator: ==
Quads() push b
Quads() DIV
Quads() ADD
Lex(11) int value: 91
Quads() push 91
Lex(11) punctuators: )
Quads() EQ
1
Lex(11) end Of Statement: ; 

Lex(11) inline comment: // 91
Lex(12) command: print
Lex(12) punctuators: (
Lex(12) int value: 100
Quads() push 100
Lex(12) arithmtic operator: -
Lex(12) int value: 5
Quads() push 5
Lex(12) punctuators: )
Quads() SUB
95
Lex(12) end Of Statement: ; 

Lex(13) command: print
Lex(13) punctuators: (
Lex(13) arithmtic operator: -
Lex(13) int value: 100
Quads() push 100
Quads() NEG
Lex(13) arithmtic operator: -
Lex(13) int value: 5
Quads() push 5
Lex(13) arithmtic operator: +
Quads() SUB
Lex(13) int value: 5
Quads() push 5
Lex(13) punctuators: )
Quads() ADD
-100
Lex(13) end Of Statement: ; 

Lex(14) inline comment: ////////////////////////////////
Lex(15) command: print
Lex(15) punctuators: (
Lex(15) string value: "bitwise"
Lex(15) punctuators: )
"bitwise"
Lex(15) end Of Statement: ; 

Lex(16) identifier: a
Lex(16) punctuators: =
Lex(16) int value: 10
Quads() push 10
Lex(16) end Of Statement: ; 

Lex(17) identifier: c
Lex(17) punctuators: =
Lex(17) int value: 2
Quads() push 2
Lex(17) end Of Statement: ; 

Lex(18) command: print
Lex(18) punctuators: (
Lex(18) punctuators: (
Lex(18) identifier: a
Lex(18) bitwise operator: |
Quads() push a
Lex(18) identifier: c
Lex(18) punctuators: )
Quads() push c
Quads() BITWISE_OR
Lex(18) comparetor operator: ==
Lex(18) int value: 10
Quads() push 10
Lex(18) punctuators: )
Quads() EQ
1
Lex(18) end Of Statement: ; 

Lex(18) inline comment: // 1010 | 0010 = 1010 = 10
Lex(19) command: print
Lex(19) punctuators: (
Lex(19) punctuators: (
Lex(19) identifier: a
Lex(19) bitwise operator: &
Quads() push a
Lex(19) identifier: c
Lex(19) punctuators: )
Quads() push c
Quads() BITWISE_AND
Lex(19) comparetor operator: ==
Lex(19) int value: 2
Quads() push 2
Lex(19) punctuators: )
Quads() EQ
1
Lex(19) end Of Statement: ; 

Lex(19) inline comment: // 1010 & 0010 = 0010 = 2
Lex(20) command: print
Lex(20) punctuators: (
Lex(20) punctuators: (
Lex(20) identifier: a
Lex(20) bitwise operator: ^
Quads() push a
Lex(20) identifier: c
Lex(20) punctuators: )
Quads() push c
Quads() BITWISE_XOR
Lex(20) comparetor operator: ==
Lex(20) int value: 8
Quads() push 8
Lex(20) punctuators: )
Quads() EQ
1
Lex(20) end Of Statement: ; 

Lex(20) inline comment: // 1010 ^ 0010 = 1000 = 8
Lex(21) command: print
Lex(21) punctuators: (
Lex(21) punctuators: (
Lex(21) identifier: a
Lex(21) bitwise operator: <<
Quads() push a
Lex(21) identifier: c
Lex(21) punctuators: )
Quads() push c
Quads() SHL
Lex(21) comparetor operator: ==
Lex(21) int value: 40
Quads() push 40
Lex(21) punctuators: )
Quads() EQ
1
Lex(21) end Of Statement: ; 

Lex(21) inline comment: // 1010 << 0010 = 101000 = 40
Lex(22) command: print
Lex(22) punctuators: (
Lex(22) punctuators: (
Lex(22) identifier: a
Lex(22) bitwise operator: >>
Quads() push a
Lex(22) identifier: c
Lex(22) punctuators: )
Quads() push c
Quads() SHR
Lex(22) comparetor operator: ==
Lex(22) int value: 2
Quads() push 2
Lex(22) punctuators: )
Quads() EQ
1
Lex(22) end Of Statement: ; 

Lex(22) inline comment: // 1010 >> 0010 = 10 = 2
Lex(23) command: print
Lex(23) punctuators: (
Lex(23) punctuators: (
Lex(23) bitwise operator: ~
Lex(23) identifier: a
Quads() push a
Quads() COMPLEMENT
Lex(23) punctuators: )
Lex(23) comparetor operator: ==
Lex(23) arithmtic operator: -
Lex(23) int value: 11
Quads() push 11
Quads() NEG
Lex(23) punctuators: )
Quads() EQ
1
Lex(23) end Of Statement: ; 

Lex(23) inline comment: // -11
Lex(24) command: print
Lex(24) punctuators: (
Lex(24) punctuators: (
Lex(24) identifier: a
Lex(24) bitwise operator: <<
Quads() push a
Lex(24) identifier: c
Lex(24) punctuators: )
Quads() push c
Quads() SHL
Lex(24) bitwise operator: >>
Lex(24) identifier: c
Lex(24) comparetor operator: ==
Quads() push c
Quads() SHR
Lex(24) int value: 10
Quads() push 10
Lex(24) punctuators: )
Quads() EQ
1
Lex(24) end Of Statement: ; 

Lex(24) inline comment: // 10
Lex(25) inline comment: ////////////////////////////////
Lex(26) command: print
Lex(26) punctuators: (
Lex(26) string value: "logic"
Lex(26) punctuators: )
"logic"
Lex(26) end Of Statement: ; 

Lex(27) identifier: a
Lex(27) punctuators: =
Lex(27) int value: 1
Quads() push 1
Lex(27) end Of Statement: ; 

Lex(28) identifier: b
Lex(28) punctuators: =
Lex(28) int value: 0
Quads() push 0
Lex(28) end Of Statement: ; 

Lex(29) command: print
Lex(29) punctuators: (
Lex(29) identifier: a
Lex(29) punctuators: )
Quads() push a
1
Lex(29) end Of Statement: ; 

Lex(29) inline comment: // 1
Lex(30) command: print
Lex(30) punctuators: (
Lex(30) identifier: b
Lex(30) punctuators: )
Quads() push b
0
Lex(30) end Of Statement: ; 

Lex(30) inline comment: // 0
Lex(31) command: print
Lex(31) punctuators: (
Lex(31) identifier: a
Lex(31) comparetor operator: ==
Quads() push a
Lex(31) identifier: b
Lex(31) punctuators: )
Quads() push b
Quads() EQ
0
Lex(31) end Of Statement: ; 

Lex(31) inline comment: // 0
Lex(32) command: print
Lex(32) punctuators: (
Lex(32) identifier: a
Lex(32) comparetor operator: !=
Quads() push a
Lex(32) identifier: b
Lex(32) punctuators: )
Quads() push b
Quads() NEQ
1
Lex(32) end Of Statement: ; 

Lex(32) inline comment: // 1
Lex(33) command: print
Lex(33) punctuators: (
Lex(33) identifier: a
Lex(33) comparetor operator: <
Quads() push a
Lex(33) identifier: b
Lex(33) punctuators: )
Quads() push b
Quads() LT
0
Lex(33) end Of Statement: ; 

Lex(33) inline comment: // 0
Lex(34) command: print
Lex(34) punctuators: (
Lex(34) identifier: a
Lex(34) comparetor operator: >
Quads() push a
Lex(34) identifier: b
Lex(34) punctuators: )
Quads() push b
Quads() GT
1
Lex(34) end Of Statement: ; 

Lex(34) inline comment: // 1
Lex(35) command: print
Lex(35) punctuators: (
Lex(35) identifier: a
Lex(35) comparetor operator: <=
Quads() push a
Lex(35) identifier: b
Lex(35) punctuators: )
Quads() push b
Quads() LEQ
0
Lex(35) end Of Statement: ; 

Lex(35) inline comment: // 0
Lex(36) command: print
Lex(36) punctuators: (
Lex(36) identifier: a
Lex(36) comparetor operator: >=
Quads() push a
Lex(36) identifier: b
Lex(36) punctuators: )
Quads() push b
Quads() GEQ
1
Lex(36) end Of Statement: ; 

Lex(36) inline comment: // 1
Lex(37) inline comment: ////////////////////////////////
Lex(38) command: print
Lex(38) punctuators: (
Lex(38) string value: "More logic"
Lex(38) punctuators: )
"More logic"
Lex(38) end Of Statement: ; 

Lex(39) command: print
Lex(39) punctuators: (
Lex(39) logical operator: !
Lex(39) identifier: a
Quads() push a
Quads() NOT
Lex(39) punctuators: )
0
Lex(39) end Of Statement: ; 

Lex(39) inline comment: // 0
Lex(40) data type: bool
Lex(40) identifier: x
Lex(40) punctuators: =
Lex(40) value: true
Quads() push 1
Lex(40) end Of Statement: ; 

Lex(41) data type: bool
Lex(41) identifier: y
Lex(41) punctuators: =
Lex(41) value: false
Quads() push 0
Lex(41) end Of Statement: ; 

Lex(42) command: print
Lex(42) punctuators: (
Lex(42) identifier: x
Lex(42) logical operator: &&
Quads() push x
Lex(42) identifier: y
Lex(42) punctuators: )
Quads() push y
Quads() LOGICAL_AND
0
Lex(42) end Of Statement: ; 

Lex(42) inline comment: // 0
Lex(43) command: print
Lex(43) punctuators: (
Lex(43) punctuators: (
Lex(43) identifier: x
Lex(43) logical operator: &&
Quads() push x
Lex(43) identifier: x
Lex(43) logical operator: &&
Quads() push x
Quads() LOGICAL_AND
Lex(43) identifier: y
Lex(43) punctuators: )
Quads() push y
Quads() LOGICAL_AND
Lex(43) logical operator: ||
Lex(43) identifier: x
Lex(43) punctuators: )
Quads() push x
Quads() LOGICAL_OR
1
Lex(43) end Of Statement: ; 

Lex(43) inline comment: // 1
Lex(44) command: exit
